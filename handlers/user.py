# user.py
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from database import db
from keyboards import user_panel_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery


user_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TestQuiz(StatesGroup):
    topic = State()
    in_progress = State()

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@user_router.message(CommandStart())
async def start_handler_user(msg: Message):
    if not await db.is_admin(msg.from_user.id):
        await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç-–±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá", reply_markup=user_panel_kb())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
@user_router.message(F.text == "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def test_start(msg: Message, state: FSMContext):
    await state.clear() 
    topics = await db.get_topics()
    if not topics:
        await msg.answer("–¢–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    buttons = [[KeyboardButton(text=topic)] for topic in topics]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:", reply_markup=markup)
    await state.set_state(TestQuiz.topic)

# –ö–Ω–æ–ø–∫–∞ "üìö –¢–µ–º—ã" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º
@user_router.message(F.text == "üìö –¢–µ–º—ã")
async def show_topics(msg: Message, state: FSMContext):
    await state.clear()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–ª–æ
    topics = await db.get_topics()
    if not topics:
        await msg.answer("–¢–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    buttons = [[KeyboardButton(text=topic)] for topic in topics]
    markup = ReplyKeyboardMarkup(keyboard=buttons + [[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞:", reply_markup=markup)
    await state.set_state(TestQuiz.topic)

@user_router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=user_panel_kb())

@user_router.message(F.text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(msg: Message):
    stats = await db.get_user_stats(msg.from_user.id)
    if stats:
        await msg.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üß™ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}"
        )
    else:
        await msg.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç.")

@user_router.message(F.text == "üí∞ –î–æ–Ω–∞—Ç")
async def donate_info(msg: Message):
    await msg.answer(
        "üí∏ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–∞:\n"
        "Kaspi Gold: 4400 4302 2138 9221\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ Kaspi –ø–æ –Ω–æ–º–µ—Ä—É: +7 700 670 6701\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=user_panel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
@user_router.message(TestQuiz.topic)
async def handle_topic(msg: Message, state: FSMContext):
    topic = msg.text
    questions = await db.get_questions_by_topic(topic)

    if not questions:
        await msg.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.")
        await state.clear()
        return

    await state.update_data(topic=topic, questions=questions, current=0, correct_count=0)
    await send_next_question(msg, state)

def get_answer_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="A", callback_data="answer_A"),
            InlineKeyboardButton(text="B", callback_data="answer_B")
        ],
        [
            InlineKeyboardButton(text="C", callback_data="answer_C"),
            InlineKeyboardButton(text="D", callback_data="answer_D")
        ]
    ])

async def send_next_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    current = data["current"]

    if current >= len(questions):
        score = data["correct_count"]
        total = len(questions)
        user_id = msg.from_user.id if msg.from_user else msg.chat.id
        await db.update_user_stats(user_id, score)
        await msg.answer(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}", reply_markup=user_panel_kb())
        await state.clear()
        return

    q = questions[current]
    text = (
        f"‚ùì {q['question']}\n\n"
        f"A) {q['option_a']}\n"
        f"B) {q['option_b']}\n"
        f"C) {q['option_c']}\n"
        f"D) {q['option_d']}"
    )
    await msg.answer(text, reply_markup=get_answer_keyboard())
    await state.set_state(TestQuiz.in_progress)

@user_router.callback_query(TestQuiz.in_progress)
async def handle_inline_answer(callback: CallbackQuery, state: FSMContext):
    user_ans = callback.data.split("_")[1]  # "A", "B", "C" –∏–ª–∏ "D"

    data = await state.get_data()
    current_q = data["questions"][data["current"]]
    correct = current_q["correct_option"]

    correct_count = 0
    if user_ans == correct:
        data["correct_count"] += 1
        correct_count = 1  # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    data["current"] += 1
    await state.update_data(**data)

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await db.update_user_stats(callback.from_user.id, correct_count)

    # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    await callback.message.delete()

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(callback.message, state)


